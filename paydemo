//
//  PayManager.swift
//  WapeSpeed
//
//  Created by HeHeMobi on 11/27/24.
//

import Foundation
import StoreKit


enum WapeProduct {
    case yearly
    case quarterly
    case monthly
    
    var pruductID: String {
        switch self {
        case .yearly:
            return "com.wape.yearly7999"
        case .quarterly:
            return "com.wape.quarterly2999"
        case .monthly:
            return "com.wape.monthly1499"
        }
    }
    
    static var allCase: [WapeProduct] {
        return [.yearly, .quarterly, .monthly]
    }
}


class PayManager: NSObject {
    enum VerifyReceiptAddress: String {
        case production = "https://buy.itunes.apple.com/verifyReceipt"
        case sandbox = "https://sandbox.itunes.apple.com/verifyReceipt"
    }
    
    static let shared = PayManager()
    
    fileprivate var receiptData: Data? {
        do {
            guard let url = Bundle.main.appStoreReceiptURL else { return nil }
            let receiptData = try Data(contentsOf: url)
            return receiptData
        } catch {
            return nil
        }
    }
    
    fileprivate var service: VerifyReceiptAddress = .production
    
    override init() {
        super.init()
        SKPaymentQueue.default().add(self)
    }
    
    deinit {
        SKPaymentQueue.default().remove(self)
    }
    
    // 请求商店产品信息列表
    func requestPruducts() {
        let productIdentifiers = WapeProduct.allCase.map{ $0.pruductID }
        let request = SKProductsRequest(productIdentifiers: Set(productIdentifiers))
        request.delegate = self
        request.start()
    }
}

extension PayManager: SKProductsRequestDelegate {
    
    func productsRequest(_ request: SKProductsRequest, didReceive response: SKProductsResponse) {
        let products = response.products
        if products.isEmpty {
            print("没有内购商品")
            return
        }
        
        products.forEach { product in
            print("商品价格 = \(product.priceLocale)")
            
        }
    }
    
    func request(_ request: SKRequest, didFailWithError error: any Error) {
        
    }
}

extension PayManager: SKPaymentTransactionObserver {
    
    func paymentQueue(_ queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {
        // 遍历交易列表
        transactions.forEach { transaction in
            switch transaction.transactionState {
            case .purchasing:
                print("购买中")
            case .purchased:
                print("购买完成")
            case .failed:
                transactionFailed(transaction: transaction)
                print("购买失败")
            case .restored:
                // 消耗型商品、非续期订阅都不会走到这个状态里来。只有自动订阅和一次性商品
                print("换设备恢复购买完成")
            case .deferred:
                print("购买被限制,儿童模式")
            @unknown default:
                break
            }
        }
    }
    
    // 购买失败的处理
    fileprivate func transactionFailed(transaction: SKPaymentTransaction) {
        if let error = transaction.error as? SKError {
            switch error.code {
            case .unknown:
                print("购买失败: 未知错误")
            case .clientInvalid:
                print("购买失败: 未知错误")
            case .paymentCancelled:
                print("购买失败: 取消了支付")
            case .paymentInvalid:
                print("购买失败: 支付无效")
            case .paymentNotAllowed:
                print("购买失败: 不允许支付")
            case .storeProductNotAvailable:
                print("购买失败: 无效的商店产品(内购项目)")
            case .cloudServicePermissionDenied:
                print("购买失败: 用户未允许访问云服务信息")
            case .cloudServiceNetworkConnectionFailed:
                print("购买失败: 设备无法连接到网络")
            case .cloudServiceRevoked:
                print("购买失败: 用户已撤销使用此云服务的权限")
            case .privacyAcknowledgementRequired:
                print("购买失败: 用户需要确认 Apple 的隐私政策")
            case .unauthorizedRequestData:
                print("购买失败: 应用正在尝试使用 SKPayment 的 requestData 属性，但没有适当的权限")
            case .invalidOfferIdentifier:
                print("购买失败: 指定的订阅优惠标识符无效")
            case .invalidSignature:
                print("购买失败: 提供的加密签名无效")
            case .missingOfferParams:
                print("购买失败: SKPaymentDiscount 中缺少一个或多个参数")
            case .invalidOfferPrice:
                print("购买失败: 所选优惠的价格无效（例如低于当前基本订阅")
            case .overlayCancelled:
                print("购买失败: \(error.localizedDescription)")
            case .overlayInvalidConfiguration:
                print("购买失败: \(error.localizedDescription)")
            case .overlayTimeout:
                print("购买失败: \(error.localizedDescription)")
            case .ineligibleForOffer:
                print("购买失败: 用户没有资格获得订阅优惠")
            case .unsupportedPlatform:
                print("购买失败: 当前商品不知此此平台")
            case .overlayPresentedInBackgroundScene:
                print("购买失败: 客户端尝试在不在前台的 UIWindowScene 中显示 SKOverlay")
            @unknown default:
                print("购买失败: \(error.localizedDescription)")
            }
        }
        
        SKPaymentQueue.default().finishTransaction(transaction)
    }
    
    
    // 订单校验
    func verify(sharedSecret: String) {
        guard let storeURL = URL(string: service.rawValue) else { return }
        
        var storeRequest = URLRequest(url: storeURL)
        storeRequest.httpMethod = "POST"
        
        // 准备POST请求参数
        let receipt = receiptData?.base64EncodedString(options: [])
        let requestContents = [
            "receipt-data": receipt,
            "password": sharedSecret
        ]
        
        // 设置POST请求主体
        do {
            storeRequest.httpBody = try JSONSerialization.data(withJSONObject: requestContents, options: [])
        } catch {
            print("内购校验接口POST请求参数编码失败")
            return
        }
        
        // 创建请求任务
        let task = URLSession.shared.dataTask(with: storeRequest) { data, response, error in
            // 网络请求错误
            if let error = error {
                print("网络错误 = \(error.localizedDescription)")
                return
            }
            // 响应Data不存在
            guard let data = data else {
                print("响应Data不存在")
                return
            }
            
            guard let receiptInfo = try? JSONSerialization.jsonObject(with: data, options: .mutableLeaves) as? [String: AnyObject] ?? [:] else {
                let jsonStr = String(data: data, encoding: .utf8)
                return
            }
            
            if let status = receiptInfo["status"] as? Int {
                let receiptStatus = ReceiptStatus(rawValue: status) ?? .unknown
                switch receiptStatus {
                case .testReceipt:
                    self.service = .sandbox
                    self.verify(sharedSecret: sharedSecret)
                case .valid:
                    print("校验成功")
                    
                default:
                    print("校验失败 = \(receiptStatus)")
                }
            } else {
                print("响应接口中 status字段不存在")
            }
        }
    }
    
    
    enum ReceiptStatus: Int {
        /// Not decodable status
        case unknown = -2
        /// No status returned
        case none = -1
        /// valid statua
        case valid = 0
        /// The App Store could not read the JSON object you provided.
        case jsonNotReadable = 21000
        /// The data in the receipt-data property was malformed or missing.
        case malformedOrMissingData = 21002
        /// The receipt could not be authenticated.
        case receiptCouldNotBeAuthenticated = 21003
        /// The shared secret you provided does not match the shared secret on file for your account.
        case secretNotMatching = 21004
        /// The receipt server is not currently available.
        case receiptServerUnavailable = 21005
        /// This receipt is valid but the subscription has expired. When this status code is returned to your server, the receipt data is also decoded and returned as part of the response.
        case subscriptionExpired = 21006
        ///  This receipt is from the test environment, but it was sent to the production environment for verification. Send it to the test environment instead.
        case testReceipt = 21007
        /// This receipt is from the production environment, but it was sent to the test environment for verification. Send it to the production environment instead.
        case productionEnvironment = 21008

        var isValid: Bool { return self == .valid}
    }
    
}
